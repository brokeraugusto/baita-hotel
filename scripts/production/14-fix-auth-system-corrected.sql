-- Corrigir sistema de autenticaÃ§Ã£o com estrutura correta
-- Este script usa as colunas que realmente existem na tabela profiles

DO $$
BEGIN
    RAISE NOTICE 'ðŸ”§ CORRIGINDO SISTEMA DE AUTENTICAÃ‡ÃƒO (VERSÃƒO CORRIGIDA)';
    RAISE NOTICE '=====================================================';
    RAISE NOTICE '';
    
    -- 1. Criar funÃ§Ã£o para lidar com novos usuÃ¡rios
    RAISE NOTICE '1. Criando funÃ§Ã£o handle_new_user...';
    
END $$;

-- Criar funÃ§Ã£o para lidar com novos usuÃ¡rios (versÃ£o corrigida)
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    RAISE LOG 'Trigger handle_new_user executado para usuÃ¡rio: %', NEW.email;
    
    INSERT INTO public.profiles (
        id,
        email,
        full_name,
        role,
        hotel_name,
        created_at,
        updated_at
    ) VALUES (
        NEW.id,
        NEW.email,
        COALESCE(NEW.raw_user_meta_data->>'full_name', split_part(NEW.email, '@', 1)),
        COALESCE(NEW.raw_user_meta_data->>'user_role', 'client')::user_role,
        NEW.raw_user_meta_data->>'hotel_name',
        NOW(),
        NOW()
    );
    
    RAISE LOG 'Perfil criado para usuÃ¡rio: %', NEW.email;
    
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        RAISE LOG 'Erro ao criar perfil para %: %', NEW.email, SQLERRM;
        RETURN NEW; -- NÃ£o falhar o registro do usuÃ¡rio
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Remover trigger existente se houver
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Criar trigger para novos usuÃ¡rios
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

DO $$
BEGIN
    RAISE NOTICE 'âœ… FunÃ§Ã£o e trigger criados com sucesso!';
    RAISE NOTICE '';
    
    -- 2. Corrigir usuÃ¡rios existentes sem perfil
    RAISE NOTICE '2. Corrigindo usuÃ¡rios existentes sem perfil...';
    
    -- Criar perfis para usuÃ¡rios que nÃ£o tÃªm (usando colunas corretas)
    INSERT INTO public.profiles (
        id,
        email,
        full_name,
        role,
        hotel_name,
        created_at,
        updated_at
    )
    SELECT 
        u.id,
        u.email,
        COALESCE(u.raw_user_meta_data->>'full_name', split_part(u.email, '@', 1)),
        COALESCE(u.raw_user_meta_data->>'user_role', 'client')::user_role,
        u.raw_user_meta_data->>'hotel_name',
        u.created_at,
        NOW()
    FROM auth.users u
    LEFT JOIN public.profiles p ON u.id = p.id
    WHERE p.id IS NULL;
    
    -- Mostrar quantos perfis foram criados
    RAISE NOTICE 'âœ… Perfis criados para usuÃ¡rios existentes!';
    RAISE NOTICE '';
    
    RAISE NOTICE 'ðŸŽ‰ SISTEMA DE AUTENTICAÃ‡ÃƒO CORRIGIDO!';
    RAISE NOTICE '';
    RAISE NOTICE 'ðŸ“‹ PRÃ“XIMOS PASSOS:';
    RAISE NOTICE '1. Acesse /cadastro na aplicaÃ§Ã£o';
    RAISE NOTICE '2. Crie uma conta nova com qualquer email';
    RAISE NOTICE '3. O perfil serÃ¡ criado automaticamente';
    RAISE NOTICE '4. FaÃ§a login normalmente';
    RAISE NOTICE '';
    
END $$;
